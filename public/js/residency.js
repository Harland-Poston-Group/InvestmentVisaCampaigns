/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/residency.js":
/*!***********************************!*\
  !*** ./resources/js/residency.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\njQuery(document).ready(function () {\n  jQuery(\"lottie-player\").addClass(\"lottie-custom\");\n  var currentUrl = window.location.href;\n\n  // Check if the URL contains '/campaign'\n  if (currentUrl.indexOf(\"/campaign\") !== -1) {\n    // Set a new title for the page\n    document.title = \"Investment Visa\";\n  }\n  if (currentUrl.indexOf(\"/thankyou\") !== -1) {\n    // Set a new title for the page\n    document.title = \"Before you leave...\";\n  }\n  jQuery('#campaign-form.thank-you-form').insertBefore('#footer-thank-you').addClass('col-12');\n  jQuery('.address-block').html(function (_, html) {\n    // Replace \"Terms & Conditions | Privacy Policy\" with linked text\n    return html.replace('Terms & Conditions | Privacy Policy', '<a href=\"https://www.investmentvisa.com/privacy-policy\" target=\"_blank\">Terms & Conditions</a> | <a href=\"https://www.investmentvisa.com/privacy-policy\" target=\"_blank\">Privacy Policy</a>');\n  });\n});\njQuery(document).ready(function () {\n  var blacklist = [\"free visa\", \"jobless\", \"work parmit\", \"work permit\", \"uber\", \"need job\", \"need a job\", \"job\", \"jobs\", \"encountered an error\", \"unsubscribe\", \"marketing emails\", \"language settings\", \"unable to access my account\", \"sponsor visa\", \"sponsorship visa\", \"tourist visa\", \"work visa\", \"fuck\", \"shit\", \"sshit\"];\n  jQuery('textarea').on('input', function () {\n    var content = jQuery(this).val();\n    var foundBlacklisted = false;\n\n    // Check if any blacklisted word/sentence exists\n    jQuery.each(blacklist, function (index, word) {\n      var regex = new RegExp('\\\\b' + word + '\\\\b', 'gi'); // Create regex for each blacklisted word\n      if (regex.test(content)) {\n        foundBlacklisted = true;\n        alert(\"You have written '\" + word + \"' Investment Visa does not offer services in regard to '\" + word + \"'.\");\n        /*\n        if(word === 'work visa')\n        {\n            alert(\"You have written Work Visa. Investment Visa does not offer services in regard to Work Visas.\");\n        }\n        else {\n            alert(\"The word or sentence '\" + word + \"' is not allowed.\");\n         }\n        */\n        // Remove the word/sentence from the content\n        content = content.replace(regex, '');\n      }\n    });\n\n    // Update the textarea with the filtered content\n    if (foundBlacklisted) {\n      jQuery('textarea').val(content); // Update if a blacklisted word was found\n    }\n  });\n});\njQuery.ajaxSetup({\n  headers: {\n    'X-CSRF-TOKEN': jQuery('meta[name=\"csrf-token\"]').attr('content')\n  }\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Capture referrer and location data\n  var referrer = document.referrer;\n  var locationData = {};\n\n  /*\n  fetch('http://ip-api.com/json/')\n      .then(response => response.json())\n      .then(data => {\n          locationData.country = data.country;\n          locationData.city = data.city;\n          locationData.region = data.regionName;\n          locationData.timezone = data.timezone;\n          locationData.query = data.query;\n          // Attach form submit event after location data is available\n          document.getElementById('campaign-form').addEventListener('submit', function(event) {\n              event.preventDefault();\n              const formData = new FormData(this);\n               // Append referrer and location data to the formData\n              formData.append('referrer', referrer);\n              formData.append('country', locationData.country);\n              formData.append('city', locationData.city);\n              formData.append('region', locationData.region);\n              formData.append('timezone', locationData.timezone);\n              formData.append('IP', locationData.query);\n               fetch('send-email.php', {\n                  method: 'POST',\n                  body: formData\n              })\n                  .then(response => response.text())\n                  .then(data => {\n                      // Show Toastify toast message\n                      Toastify({\n                          text: data,\n                          duration: 5000, // 5 seconds\n                          gravity: \"top\", // top or bottom\n                          position: \"center\", // left, center, or right\n                          backgroundColor: \"#6A257A\", // customize color\n                      }).showToast();\n                      // Reset the form after successful submission\n                      this.reset();\n                  })\n                  .catch(error => console.error('Error:', error));\n          });\n      })\n      .catch(err => console.error('Error getting location data:', err));\n  */\n});\n\n/*\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById('campaign-form').addEventListener('submit', function(event) {\n        event.preventDefault();\n        const formData = new FormData(this);\n\n        fetch('send-email.php', {\n            method: 'POST',\n            body: formData\n        })\n            .then(response => response.text())\n            .then(data => {\n                // Show Toastify toast message\n                Toastify({\n                    text: data,\n                    duration: 5000, // 5 seconds\n                    gravity: \"top\", // top or bottom\n                    position: \"center\", // left, center, or right\n                    backgroundColor: \"#6A257A\", // green for success\n                }).showToast();\n                // Reset the form after successful submission\n                this.reset();\n            })\n            .catch(error => console.error('Error:', error));\n    });\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Detect referrer\n    let referrer = document.referrer;\n    console.log(\"Referrer: \", referrer);\n\n    fetch('http://ip-api.com/json/')\n        .then(response => response.json())\n        .then(data => {\n            let country = data.country;\n            let city = data.city;\n            let regionName = data.regionName;\n            let timezone = data.timezone;\n            console.log(\"Region: \", regionName);\n            console.log(\"Country: \", country);\n            console.log(\"City: \", city);\n            console.log(\"Time Zone: \", timezone);\n        })\n        .catch(err => console.error(err));\n});\n*/\n\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(function (anchor) {\n  anchor.addEventListener('click', function (e) {\n    e.preventDefault();\n    var targetId = this.getAttribute('href');\n\n    // Check if targetId is not just '#'\n    if (targetId !== '#') {\n      var targetElement = document.querySelector(targetId);\n      if (targetElement) {\n        targetElement.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n  });\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  var scrollToTopBtn = document.getElementById('scrollToTopBtn');\n  window.onscroll = function () {\n    scrollFunction();\n  };\n  function scrollFunction() {\n    if (document.documentElement.scrollTop > 20) {\n      scrollToTopBtn.style.display = \"block\";\n    } else {\n      scrollToTopBtn.style.display = \"none\";\n    }\n  }\n  scrollToTopBtn.addEventListener('click', function () {\n    // console.log('scrollToTopBtn');\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  });\n});\njQuery(document).ready(function () {\n  jQuery('#top-menu .container-fluid').removeClass('container-fluid').addClass('container');\n  var newDiv = jQuery('<div class=\"col-12\"></div>');\n\n  // Wrap the content of .footer-iv with the new div\n  jQuery('.footer-iv').wrapInner(newDiv);\n  jQuery(window).on('scroll', function () {\n    var scrollPosition = jQuery(this).scrollTop();\n    // console.log('Scroll position:', scrollPosition);\n\n    if (scrollPosition >= 600) {\n      jQuery('.right-button-scroll').fadeIn().addClass('active');\n    } else {\n      jQuery('#campaign-form').removeClass('move-to-right').fadeIn();\n      jQuery('.right-button-scroll').hide().removeClass('active');\n      // jQuery('#scrollToTopBtn').fadeOut()\n    }\n  });\n\n  // jQuery(\".right-button-scroll\").on( \"click\", function(e) {\n  //     e.preventDefault();\n  //     jQuery('#campaign-form').hide().addClass('move-to-right');\n  //     // jQuery('<a href=\"#\" class=\"btn-close\"><i class=\"far fa-times-circle\"></i></a>').insertBefore('#campaign-form .form-title');\n  //     jQuery('#campaign-form.move-to-right').show();\n  // });\n});\njQuery(document).ready(function () {\n  var divsToWrap = jQuery('.video-mask, .header-mask'); // Adjust the selectors to match your divs\n\n  // Wrap the selected divs with a new div\n  divsToWrap.wrapAll('<div class=\"video-wrapper\"></div>');\n  if (jQuery(window).width() < 767) {\n    jQuery('#campaign-form').insertAfter('.video-wrapper');\n\n    // jQuery(\".right-button-scroll\").on( \"click\", function(e) {\n    //     e.preventDefault();\n    //     console.log('top');\n    //     jQuery('#campaign-form').hide().addClass('move-to-right');\n    //     // jQuery('<a href=\"#\" class=\"btn-close\"><i class=\"far fa-times-circle\"></i></a>').insertBefore('#campaign-form .form-title');\n    //     jQuery('#campaign-form.move-to-right').show();\n    // });\n\n    jQuery('body').addClass('mobile');\n    jQuery(\".header-mask\").attr(\"src\", \"/images/residency/headermask-mobile.png\").appendTo('.video-container');\n    jQuery('#cards-row .card-container').removeClass('col-12').addClass('col-6');\n    jQuery('.bottom-cards .card-container').removeClass('col-12').addClass('col-6');\n    jQuery('#cards-row .card-container').slice(0, 2).wrapAll('<div class=\"row\"></div>');\n    jQuery('#cards-row .card-container').slice(-2).wrapAll('<div class=\"row\"></div>');\n    jQuery('.bottom-cards .card-container').wrapAll('<div class=\"bottom-cards-inner row\"></div>');\n    jQuery('.title-bottom').insertAfter('.img-bottom');\n    jQuery('.title-left').insertAfter('.img-left');\n  } else {\n    jQuery('body').removeClass('mobile');\n    jQuery(\".header-mask\").attr(\"src\", \"/images/residency/headermask.png\");\n    jQuery('#navbar').removeClass('col-sm-8').addClass('col-sm-12');\n    jQuery('#cards-row .card-container').removeClass('col-6').addClass('col-12');\n    jQuery('.title-bottom').insertBefore('.img-bottom');\n    jQuery('.title-left').insertBefore('.img-left');\n  }\n  jQuery('.navbar-toggler').on('click', function () {\n    jQuery('#navbar').toggleClass('show');\n  });\n  jQuery(\".top-video-block\").wrap(\"<div class='video-container'></div>\");\n  var url = window.location.href;\n  // Example: Extract the path name\n  var pathname = window.location.pathname;\n\n  // You can also extract other parts of the URL if needed\n  // var hostname = window.location.hostname;\n  // var searchParams = new URLSearchParams(window.location.search);\n  // var someParam = searchParams.get('someParam');\n\n  // Add class to the body based on the path\n  jQuery('body').addClass(pathname.replace(/\\//g, 'page-'));\n\n  // Example: Add class based on specific URL condition\n  /*\n  if (url.includes('admin')) {\n      jQuery('body').addClass('admin-page');\n  }\n  */\n  /*\n  jQuery('<div class=\"toast-container p-3 top-50 start-70 translate-middle\" id=\"toastPlacement\" data-original-class=\"toast-container p-3\">' +\n      '<div aria-live=\"polite\" aria-atomic=\"true\" class=\"position-relative bd-example-toasts\">' +\n      '<div class=\"toast\" data-bs-autohide=\"false\">\\n' +\n      '  <div class=\"toast-header\">\\n' +\n      '    <i class=\"fas fa-info-circle\"></i> You have selected Work Visa\\n' +\n      '    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"toast\"></button>\\n' +\n      '  </div>\\n' +\n      '  <div class=\"toast-body\">\\n' +\n      '    Investment Visa does not offer services in regards to Work Visas.\\n' +\n      '  </div>\\n' +\n      '</div></div></div>').insertAfter('#campaign-form .form-title');\n  */\n  jQuery(\"#enquiry_subject\").change(function () {\n    var val = jQuery(this).val();\n    var alert = jQuery('<div id=\"campaign-info\" class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\"><a class=\"btn-close\" data-dismiss=\"alert\" aria-label=\"Close\"><i class=\"far fa-times-circle\"></i></a><i class=\"fas fa-info-circle\"></i> You have selected Work Visa<br>Investment Visa does not offer services in regards to Work Visas.</div>');\n    if (jQuery(this).val() === \"Work Visa\") {\n      jQuery('#form-bt').attr(\"disabled\", true);\n      // const toast = new bootstrap.Toast(document.querySelector('.toast'));\n      // toast.show({ delay: 50000 });\n      alert.appendTo('#campaign-form');\n    } else {\n      jQuery('#form-bt').attr(\"disabled\", false);\n      jQuery('.alert').hide().removeClass('show');\n    }\n  });\n  jQuery(\"input#phone\").on(\"keypress keyup blur\", function (event) {\n    // 1. Check for invalid characters\n    var hasInvalidChars = /[^0-9+()-]/.test(jQuery(this).val());\n    //jQuery(this).val(jQuery(this).val().replace(/\\s/g, \"-\"));\n    // 2. Modify input value (same as before)\n    jQuery(this).val(jQuery(this).val().replace(/[^0-9+()-]/g, \"\"));\n    console.log('tel');\n\n    // 3. Add/remove error message based on validity\n    if (hasInvalidChars) {\n      jQuery(this).addClass(\"error\"); // Add error class to input field\n      var msg = 'No Letters Allowed.';\n      jQuery('<div class=\"alert alert-danger error-message m-0 p-1 px-2 small\" role=\"alert\"><span class=\"small\">' + msg + '</span></div>').insertAfter(this);\n      // jQuery(\".error-message\").show(); // Show error message element\n    } else {\n      jQuery(this).removeClass(\"error\"); // Remove error class\n      jQuery(\".error-message\").hide().css(\"display\", \"none\"); // Hide error message element\n    }\n  });\n});\n\n// Form submission\njQuery(\"#campaign-form\").on(\"submit\", function (e) {\n  e.preventDefault();\n  var this_form = jQuery(this).serialize();\n  var this_form_element = jQuery(this);\n  var submitButton = this_form_element.find('button[type=submit]');\n  if (submitButton.length > 0) {\n    submitButton.html('Submitting... <span id=\"spinner\"><svg version=\"1.1\" id=\"L9\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" enable-background=\"new 0 0 0 0\" xml:space=\"preserve\" width=\"20px\" height=\"20px\"><path fill=\"#fff\" d=\"M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50\"><animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" dur=\"1s\" from=\"0 50 50\" to=\"360 50 50\" repeatCount=\"indefinite\" /></path></svg></span>');\n  }\n\n  // Disable the button\n  submitButton.prop('disabled', true);\n  jQuery.ajax({\n    url: \"/form-submission.php\",\n    type: \"POST\",\n    // headers: {\n    //     'X-CSRF-TOKEN': jQuery('meta[name=\"csrf-token\"]').attr('content')\n    // },\n    data: this_form,\n    success: function success(response) {\n      if (response) {\n        //   jQuery('#success-message').text(response.success).css({\"color\":\"green\"});\n\n        // Notify(response.success, null, null, 'success');\n\n        // // Clean form\n        // jQuery(\"#get-in-touch-with-us-form\")[0].reset();\n        // grecaptcha.reset(); // Reset the reCAPTCHA widget\n\n        console.log('success: ' + response);\n        Toastify({\n          text: 'Thank you for your enquiry. We\\'ll be in contact, shortly',\n          duration: 5000,\n          // 5 seconds\n          gravity: \"top\",\n          // top or bottom\n          position: \"center\",\n          // left, center, or right\n          backgroundColor: \"#6A257A\" // customize color\n        }).showToast();\n\n        // Reset the form after successful submission\n        // this_form_element.reset();\n      } else {\n        // jQuery('#success-message').text(response.error).css({\"color\":\"red\"});\n\n        // Notify(response.error, null, null, 'error');\n        // enquire_button.attr('disabled', false);\n        // grecaptcha.reset(); // Reset the reCAPTCHA widget\n        console.log('error: ' + response);\n      }\n    },\n    error: function error(xhr, status, errorMessage) {\n      console.log(\"RESPONSE: , error: \" + errorMessage);\n    },\n    complete: function complete() {\n      // Revert the button text and remove the spinner\n      submitButton.html('Submit');\n      submitButton.prop('disabled', false);\n      this_form_element[0].reset();\n      // Redirect the user to the /thankyou page after completion\n      window.location.href = \"/thank-you\";\n    }\n  });\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  var splide = new Splide('.splide', {\n    type: 'loop',\n    perPage: 3,\n    perMove: 1,\n    gap: '50px',\n    autoplay: true,\n    interval: 6000,\n    speed: 500,\n    easing: 'ease',\n    arrows: true,\n    // Disable default arrows\n    classes: {\n      arrows: 'splide__arrows your-class-arrows',\n      arrow: 'splide__arrow your-class-arrow',\n      prev: 'splide__arrow--prev your-class-prev',\n      next: 'splide__arrow--next your-class-next'\n    },\n    breakpoints: {\n      991: {\n        perPage: 1\n      }\n    }\n  });\n  splide.mount();\n});\n\n/*\nconst swiper = new Swiper('.swiper-container', {\n    slidesPerView: 1,\n    spaceBetween: 10,\n    pagination: {\n        el: '.swiper-pagination',\n        clickable: true,\n    },\n    navigation: {\n        nextEl: '.swiper-button-next',\n        prevEl: '.swiper-button-prev',\n    },\n    breakpoints: {\n        640: {\n            slidesPerView: 1,\n            spaceBetween: 20,\n        },\n        768: {\n            slidesPerView: 2,\n            spaceBetween: 30,\n        },\n        1024: {\n            slidesPerView: 3,\n            spaceBetween: 40,\n        },\n    }\n});\n*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/residency.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/residency.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;