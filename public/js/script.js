/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/script.js":
/*!********************************!*\
  !*** ./resources/js/script.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// $.noConflict();\ndocument.getElementById('hamburgerMenu').addEventListener('click', function () {\n  var navMenu = document.getElementById('navMenu');\n  navMenu.classList.toggle('active');\n});\nvar splide = new Splide('.splide', {\n  type: 'loop',\n  gap: 60,\n  pagination: true,\n  arrows: false,\n  perPage: 3,\n  perMove: 1,\n  autoplay: true,\n  interval: 6000,\n  speed: '500',\n  easing: 'ease',\n  // Appending the pagination buttons to a specific element\n  // pagination: '#testimonial-slider-container',\n  breakpoints: {\n    991: {\n      perPage: 1\n    }\n  }\n  // autoWidth: true,\n});\nsplide.mount();\n$(document).ready(function () {\n  var form = $('form');\n\n  // Insert the hidden input for the country code extension\n  if (form.length > 0) {\n    var element = '<div style=\"opacity: 0; height: 0; overflow: hidden;\">\\\n            <label for=\"country_code\">Extension Phone Number</label>\\\n            <input id=\"country_code\" type=\"text\" class=\"extension-input\" name=\"country_code\" value=\"\">\\\n        </div>';\n\n    // var element = '<input type=\"hidden\" class=\"extension-input\" name=\"country_code\" value=\"\">';\n\n    form.append(element);\n  }\n\n  // Fetch geolocation data only once\n  var geoDataPromise = fetchGeoData();\n\n  // Iterate over each .phone-number-extension input\n  $('.phone-number-extension').each(function () {\n    var input = this;\n    var countryCallingCode;\n    var iti = window.intlTelInput(input, {\n      initialCountry: \"auto\",\n      // Automatically select the user's country based on their IP address\n      separateDialCode: true // Show the country code separately in the input field\n    });\n\n    // Use the fetched data once it's available\n    geoDataPromise.then(function (data) {\n      // ipgeolocation.io\n      if (data.country_code2) {\n        iti.setCountry(data.country_code2.toUpperCase()); // Set country code based on response\n        $(input).closest('form').find('.extension-input').attr('value', data.calling_code);\n\n        // ipapi.co\n      } else if (data.country) {\n        iti.setCountry(data.country.toUpperCase()); // Set country code based on response\n        $(input).closest('form').find('.extension-input').attr('value', data.country_calling_code);\n      } else {\n        console.log(data);\n        console.warn(\"Unable to determine country code from API response.\");\n      }\n    })[\"catch\"](function (error) {\n      console.error(\"Error fetching geolocation data:\", error);\n    });\n    $(input).on(\"countrychange\", function () {\n      console.log(\"The user changed the selected country\");\n      /* I'll comment the rest of the code as it may be useful to know specifically the country the person selected */\n      countryCallingCode = $(this).siblings('.iti__flag-container').find('.iti__selected-flag').attr('title');\n      // countryCallingCode = countryCallingCode.replace(/[^0-9]/g,'');\n      // countryCallingCode = \"+\"+countryCallingCode;\n\n      // Emptying the contact number whenever the person changes the country\n      $(this).val(\"\");\n      $(this).attr('data-country-code', countryCallingCode);\n\n      // Apply only to the extension input within this form and not other forms in the page\n      var form = $(this).closest('form');\n      if (form.find(\".extension-input\").length) {\n        // $(\".extension-input\").attr('value', countryCallingCode);\n        // form.find(\".extension-input\").val(countryCallingCode);\n        form.find(\".extension-input\").attr('value', countryCallingCode);\n      }\n\n      //   console.log(countryCallingCode);\n    });\n  });\n  function fetchGeoData() {\n    return fetchPrimaryGeoData()[\"catch\"](function () {\n      return fetchFallbackGeoData();\n    });\n  }\n\n  // Function to fetch geolocation data from primary API\n  function fetchPrimaryGeoData() {\n    return fetch('https://api.ipgeolocation.io/ipgeo?apiKey=55e4b1ac2c0b4e05ad22deb513fe9bcd').then(function (response) {\n      if (response.status === 429) {\n        console.warn(\"Received 429 status code from primary API\");\n        throw new Error(\"Rate limit exceeded\");\n      }\n      return response.json();\n    })[\"catch\"](function (error) {\n      console.error(\"Error fetching geolocation data from primary API:\", error);\n      throw error;\n    });\n  }\n\n  // Function to fetch geolocation data from fallback API\n  function fetchFallbackGeoData() {\n    return fetch('https://ipapi.co/json/').then(function (response) {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json();\n    })[\"catch\"](function (error) {\n      console.error(\"Error fetching geolocation data from fallback API:\", error);\n      throw error;\n    });\n  }\n  $(window).on('scroll', function () {\n    // Check if the window width is less than 768px (for mobile)\n    if ($(window).width() < 768) {\n      if ($(this).scrollTop() > 120) {\n        $('#top-header').addClass('sticky');\n      } else {\n        $('#top-header').removeClass('sticky');\n      }\n    } else {\n      // Remove the sticky class if the window is resized to be larger than 768px\n      $('#top-header').removeClass('sticky');\n    }\n  });\n\n  // $(\"lottie-player\").addClass(\"lottie-custom\");\n\n  var currentUrl = window.location.href;\n\n  // Check if the URL contains '/campaign'\n  if (currentUrl.indexOf(\"/campaign\") !== -1) {\n    // Set a new title for the page\n    document.title = \"Investment Visa - Residency and Citizenship\";\n  }\n  if (currentUrl.indexOf(\"/thankyou\") !== -1) {\n    // Set a new title for the page\n    document.title = \"Before you leave...\";\n  }\n  $('#campaign-form.thank-you-form').insertBefore('#footer-thank-you').addClass('col-12');\n  $('.address-block').html(function (_, html) {\n    // Replace \"Terms & Conditions | Privacy Policy\" with linked text\n    return html.replace('Terms & Conditions | Privacy Policy', '<a href=\"https://www.investmentvisa.com/privacy-policy\" target=\"_blank\">Terms & Conditions</a> | <a href=\"https://www.investmentvisa.com/privacy-policy\" target=\"_blank\">Privacy Policy</a>');\n  });\n});\n$(document).ready(function () {\n  var blacklist = [\"free visa\", \"jobless\", \"work parmit\", \"work permit\", \"uber\", \"need job\", \"need a job\", \"job\", \"jobs\", \"encountered an error\", \"unsubscribe\", \"marketing emails\", \"language settings\", \"unable to access my account\", \"sponsor visa\", \"sponsorship visa\", \"tourist visa\", \"work visa\", \"fuck\", \"shit\", \"sshit\"];\n  $('textarea').on('input', function () {\n    var content = $(this).val();\n    var foundBlacklisted = false;\n\n    // Check if any blacklisted word/sentence exists\n    $.each(blacklist, function (index, word) {\n      var regex = new RegExp('\\\\b' + word + '\\\\b', 'gi'); // Create regex for each blacklisted word\n      if (regex.test(content)) {\n        foundBlacklisted = true;\n        alert(\"You have written '\" + word + \"' Investment Visa does not offer services in regard to '\" + word + \"'.\");\n        /*\n        if(word === 'work visa')\n        {\n            alert(\"You have written Work Visa. Investment Visa does not offer services in regard to Work Visas.\");\n        }\n        else {\n            alert(\"The word or sentence '\" + word + \"' is not allowed.\");\n         }\n        */\n        // Remove the word/sentence from the content\n        content = content.replace(regex, '');\n      }\n    });\n\n    // Update the textarea with the filtered content\n    if (foundBlacklisted) {\n      $('textarea').val(content); // Update if a blacklisted word was found\n    }\n  });\n});\n$.ajaxSetup({\n  headers: {\n    'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n  }\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Capture referrer and location data\n  var referrer = document.referrer;\n  var locationData = {};\n\n  /*\n  fetch('http://ip-api.com/json/')\n      .then(response => response.json())\n      .then(data => {\n          locationData.country = data.country;\n          locationData.city = data.city;\n          locationData.region = data.regionName;\n          locationData.timezone = data.timezone;\n          locationData.query = data.query;\n          // Attach form submit event after location data is available\n          document.getElementById('campaign-form').addEventListener('submit', function(event) {\n              event.preventDefault();\n              const formData = new FormData(this);\n               // Append referrer and location data to the formData\n              formData.append('referrer', referrer);\n              formData.append('country', locationData.country);\n              formData.append('city', locationData.city);\n              formData.append('region', locationData.region);\n              formData.append('timezone', locationData.timezone);\n              formData.append('IP', locationData.query);\n               fetch('send-email.php', {\n                  method: 'POST',\n                  body: formData\n              })\n                  .then(response => response.text())\n                  .then(data => {\n                      // Show Toastify toast message\n                      Toastify({\n                          text: data,\n                          duration: 5000, // 5 seconds\n                          gravity: \"top\", // top or bottom\n                          position: \"center\", // left, center, or right\n                          backgroundColor: \"#6A257A\", // customize color\n                      }).showToast();\n                      // Reset the form after successful submission\n                      this.reset();\n                  })\n                  .catch(error => console.error('Error:', error));\n          });\n      })\n      .catch(err => console.error('Error getting location data:', err));\n  */\n});\n\n/*\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById('campaign-form').addEventListener('submit', function(event) {\n        event.preventDefault();\n        const formData = new FormData(this);\n\n        fetch('send-email.php', {\n            method: 'POST',\n            body: formData\n        })\n            .then(response => response.text())\n            .then(data => {\n                // Show Toastify toast message\n                Toastify({\n                    text: data,\n                    duration: 5000, // 5 seconds\n                    gravity: \"top\", // top or bottom\n                    position: \"center\", // left, center, or right\n                    backgroundColor: \"#6A257A\", // green for success\n                }).showToast();\n                // Reset the form after successful submission\n                this.reset();\n            })\n            .catch(error => console.error('Error:', error));\n    });\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Detect referrer\n    let referrer = document.referrer;\n    console.log(\"Referrer: \", referrer);\n\n    fetch('http://ip-api.com/json/')\n        .then(response => response.json())\n        .then(data => {\n            let country = data.country;\n            let city = data.city;\n            let regionName = data.regionName;\n            let timezone = data.timezone;\n            console.log(\"Region: \", regionName);\n            console.log(\"Country: \", country);\n            console.log(\"City: \", city);\n            console.log(\"Time Zone: \", timezone);\n        })\n        .catch(err => console.error(err));\n});\n*/\n\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(function (anchor) {\n  anchor.addEventListener('click', function (e) {\n    e.preventDefault();\n    var targetId = this.getAttribute('href');\n\n    // Check if targetId is not just '#'\n    if (targetId !== '#') {\n      var targetElement = document.querySelector(targetId);\n      if (targetElement) {\n        targetElement.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n  });\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  var scrollToTopBtn = document.getElementById('scrollToTopBtn');\n  window.onscroll = function () {\n    scrollFunction();\n  };\n  function scrollFunction() {\n    if (document.documentElement.scrollTop > 20) {\n      scrollToTopBtn.style.display = \"block\";\n    } else {\n      scrollToTopBtn.style.display = \"none\";\n    }\n  }\n  scrollToTopBtn.addEventListener('click', function () {\n    // console.log('scrollToTopBtn');\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  });\n});\n$(window).on('scroll', function () {\n  var scrollPosition = $(this).scrollTop();\n  // console.log('this Scroll position:', scrollPosition);\n\n  if (scrollPosition >= 100) {\n    $('#top-header').addClass('active');\n  }\n  if (scrollPosition >= 600) {\n    $('.right-button-scroll').fadeIn().addClass('active');\n  } else {\n    $('.right-button-scroll').hide().removeClass('active');\n    $('#hidden-form').removeClass('active');\n    $('#top-header').removeClass('active');\n  }\n});\n$(document).ready(function () {\n  $(\".nav-menu a\").on(\"click\", function (e) {\n    e.preventDefault();\n    $('.nav-menu').removeClass('active');\n  });\n  $('#top-menu .container-fluid').removeClass('container-fluid').addClass('container');\n\n  // const newDiv = $('<div class=\"col-12\"></div>');\n\n  // Wrap the content of .footer-iv with the new div\n  // $('.footer-iv').wrapInner(newDiv);\n\n  $(\".right-button-scroll\").on(\"click\", function (e) {\n    e.preventDefault();\n    $('#hidden-form').addClass('active');\n  });\n  $(\".popup-modal\").on(\"click\", function (e) {\n    e.preventDefault();\n    $('#hidden-form').addClass('active');\n  });\n  $(\".enquire-button\").on(\"click\", function (e) {\n    e.preventDefault();\n    $('#hidden-form').addClass('active');\n  });\n  $(\".meeting-button\").on(\"click\", function (e) {\n    e.preventDefault();\n    $('#hidden-form').addClass('active');\n  });\n});\n$(document).ready(function () {\n  $('a.btn-close-form').on(\"click\", function (e) {\n    $('#hidden-form').removeClass('active');\n  });\n  var divsToWrap = $('.video-mask, .header-mask'); // Adjust the selectors to match your divs\n\n  // Wrap the selected divs with a new div\n  divsToWrap.wrapAll('<div class=\"video-wrapper\"></div>');\n\n  // Add a click animation on the flipcards\n  if ($(window).width() < 767) {\n    // Flipcard\n    $('.flip-card').on('click', function () {\n      var content = $(this).find('.flip-card-back p').html();\n      console.log(content);\n      Notify(content, null, null, 'success');\n    });\n  }\n  if ($(window).width() < 767) {\n    $(\".right-button-scroll\").on(\"click\", function (e) {\n      e.preventDefault();\n      $('#hidden-form').addClass('active');\n    });\n    $('body').addClass('mobile');\n    $(\".header-mask\").attr(\"src\", \"/images/headermask-mobile.png\").appendTo('.video-container');\n    // $('#cards-row .card-container').removeClass('col-12').addClass('col-6');\n    // $('.bottom-cards .card-container').removeClass('col-12').addClass('col-6');\n    // $('#cards-row .card-container').slice(0, 2).wrapAll('<div class=\"row\"></div>');\n    // $('#cards-row .card-container').slice(-2).wrapAll('<div class=\"row\"></div>');\n    // $('.bottom-cards .card-container').wrapAll('<div class=\"bottom-cards-inner row\"></div>');\n    $('.title-bottom').insertAfter('.img-bottom');\n    $('.title-left').insertAfter('.img-left');\n  } else {\n    $('body').removeClass('mobile');\n    $(\".header-mask\").attr(\"src\", \"/images/headermask.png\");\n    $('#navbar').removeClass('col-sm-8').addClass('col-sm-12');\n    $('#cards-row .card-container').removeClass('col-6').addClass('col-12');\n    $('.title-bottom').insertBefore('.img-bottom');\n    $('.title-left').insertBefore('.img-left');\n  }\n  $('.navbar-toggler').on('click', function () {\n    $('#navbar').toggleClass('show');\n  });\n  $(\".top-video-block\").wrap(\"<div class='video-container'></div>\");\n  var url = window.location.href;\n  // Example: Extract the path name\n  var pathname = window.location.pathname;\n\n  // You can also extract other parts of the URL if needed\n  // var hostname = window.location.hostname;\n  // var searchParams = new URLSearchParams(window.location.search);\n  // var someParam = searchParams.get('someParam');\n\n  // Add class to the body based on the path\n  $('body').addClass(pathname.replace(/\\//g, 'page-'));\n\n  // Example: Add class based on specific URL condition\n  /*\n  if (url.includes('admin')) {\n      $('body').addClass('admin-page');\n  }\n  */\n\n  var alert = $('<div id=\"campaign-info\" class=\"alert alert-warning alert-dismissible fade show mx-auto position-fixed\" role=\"alert\"><a class=\"btn-close\" data-dismiss=\"alert\" aria-label=\"Close\"></a>You have selected <b>\\'Work Visa\\'</b><br>Investment Visa does not offer services in regards to Work Visas.</div>');\n  $(\".enquiry_subject\").on(\"change\", function () {\n    var val = $(this).val();\n    if (val === \"Work visa\") {\n      $(\".form-send-bt\").prop(\"disabled\", true);\n      alert.prependTo('.video-wrapper').show();\n      $(\".alert\").addClass(\"show\");\n    } else {\n      $(\".form-send-bt\").prop(\"disabled\", false);\n      $('.alert').removeClass('show').hide();\n    }\n  });\n  $(\"input#phone\").on(\"keypress keyup blur\", function (event) {\n    // 1. Check for invalid characters\n    var hasInvalidChars = /[^0-9+()-]/.test($(this).val());\n    //$(this).val($(this).val().replace(/\\s/g, \"-\"));\n    // 2. Modify input value (same as before)\n    $(this).val($(this).val().replace(/[^0-9+()-]/g, \"\"));\n    console.log('tel');\n\n    // 3. Add/remove error message based on validity\n    if (hasInvalidChars) {\n      $(this).addClass(\"error\"); // Add error class to input field\n      var msg = 'No Letters Allowed.';\n      $('<div class=\"alert alert-danger error-message m-0 p-1 px-2 small\" role=\"alert\"><span class=\"small\">' + msg + '</span></div>').insertAfter(this);\n      // $(\".error-message\").show(); // Show error message element\n    } else {\n      $(this).removeClass(\"error\"); // Remove error class\n      $(\".error-message\").hide().css(\"display\", \"none\"); // Hide error message element\n    }\n  });\n});\n\n// Form submission\n$(\"#campaign-form\").on(\"submit\", function (e) {\n  e.preventDefault();\n  var this_form = $(this).serialize();\n  var this_form_element = $(this);\n  var submitButton = this_form_element.find('button[type=submit]');\n  if (submitButton.length > 0) {\n    submitButton.html('Submitting... <span id=\"spinner\"><svg version=\"1.1\" id=\"L9\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" enable-background=\"new 0 0 0 0\" xml:space=\"preserve\" width=\"20px\" height=\"20px\"><path fill=\"#fff\" d=\"M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50\"><animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" dur=\"1s\" from=\"0 50 50\" to=\"360 50 50\" repeatCount=\"indefinite\" /></path></svg></span>');\n  }\n\n  // Disable the button\n  submitButton.prop('disabled', true);\n  $.ajax({\n    // url: \"/form-submission.php\",\n    url: \"/form-submission\",\n    type: \"POST\",\n    // headers: {\n    //     'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    // },\n    data: this_form,\n    success: function success(response) {\n      if (response) {\n        //   $('#success-message').text(response.success).css({\"color\":\"green\"});\n\n        // Notify(response.success, null, null, 'success');\n\n        // // Clean form\n        // $(\"#get-in-touch-with-us-form\")[0].reset();\n        // grecaptcha.reset(); // Reset the reCAPTCHA widget\n\n        console.log('success: ' + response);\n        Toastify({\n          text: 'Thank you for your enquiry. We\\'ll be in contact, shortly',\n          duration: 5000,\n          // 5 seconds\n          gravity: \"top\",\n          // top or bottom\n          position: \"center\",\n          // left, center, or right\n          backgroundColor: \"#6A257A\" // customize color\n        }).showToast();\n\n        // Reset the form after successful submission\n        // this_form_element.reset();\n      } else {\n        // $('#success-message').text(response.error).css({\"color\":\"red\"});\n\n        // Notify(response.error, null, null, 'error');\n        // enquire_button.attr('disabled', false);\n        // grecaptcha.reset(); // Reset the reCAPTCHA widget\n        console.log('error: ' + response);\n      }\n    },\n    error: function error(xhr, status, errorMessage) {\n      console.log(\"RESPONSE: , error: \" + errorMessage);\n    },\n    complete: function complete() {\n      // Revert the button text and remove the spinner\n      submitButton.html('Submit');\n      submitButton.prop('disabled', false);\n      this_form_element[0].reset();\n      // Redirect the user to the /thankyou page after completion\n\n      // window.location.href = \"/thank-you\";\n\n      if (window.location.hash !== '#debug') {\n        window.location.href = \"/thank-you\";\n      }\n    }\n  });\n});\n/*\nconst swiper = new Swiper('.swiper-container', {\n    slidesPerView: 1,\n    spaceBetween: 10,\n    pagination: {\n        el: '.swiper-pagination',\n        clickable: true,\n    },\n    navigation: {\n        nextEl: '.swiper-button-next',\n        prevEl: '.swiper-button-prev',\n    },\n    breakpoints: {\n        640: {\n            slidesPerView: 1,\n            spaceBetween: 20,\n        },\n        768: {\n            slidesPerView: 2,\n            spaceBetween: 30,\n        },\n        1024: {\n            slidesPerView: 3,\n            spaceBetween: 40,\n        },\n    }\n});\n*/\nvar urlParams = new URLSearchParams(window.location.search);\n\n// Function to add hidden fields dynamically\nfunction addHiddenField(name, value) {\n  if (value !== null && value !== \"\") {\n    $('<input>').attr({\n      type: 'hidden',\n      name: name,\n      value: value\n    }).appendTo('#campaign-form');\n  }\n}\n\n// Add UTM parameters as hidden fields to the form\naddHiddenField('utm_source', urlParams.get('utm_source'));\naddHiddenField('utm_medium', urlParams.get('utm_medium'));\naddHiddenField('utm_campaign', urlParams.get('utm_campaign'));\naddHiddenField('utm_term', urlParams.get('utm_term'));\naddHiddenField('utm_content', urlParams.get('utm_content'));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/script.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/script.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;